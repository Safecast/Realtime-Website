<?php
/**
 * Safecast update sensors measurements functions
 *
 * PHP version 5.X
 *
 * @package    Safecast
 * @author     Marc Rollin <rollin.marc@gmail.com>
 * @copyright  2014 Safecast
 */

/* Safecast API URL format */
define('API_URI_INFO_FORMAT', 'https://api.safecast.org/devices/%s.json');
define('API_URI_CREATE_FORMAT', 'https://api.safecast.org/en-US/measurements.json?device_id=%s&per_page=1000&order=captured_at+asc');
define('API_URI_UPDATE_FORMAT', 'https://api.safecast.org/en-US/measurements.json?device_id=%s&per_page=1000&captured_after="%s"&order=captured_at+asc');


function updateSensorInformation($postId, $information) {
	update_post_meta($postId, 'sensor_type', $information->sensor);
	update_post_meta($postId, 'sensor_manufacturer', $information->manufacturer);
	update_post_meta($postId, 'sensor_model', $information->model);
}

function updateSensorMeasurement($postId, $measurement) {
	$cpm            = (float)$measurement->value;
	$maxCpm         = (float)get_post_meta($postId, 'sensor_measurement_max_cpm', TRUE);
	$sensorType     = get_post_meta(get_the_ID(), 'sensor_type', TRUE);
	
	/* Based on tube type the conversion from cpm differs */
	if (strpos($sensorType, "LND712") !== false || strpos($sensorType, "LND 712"|| strpos($sensorType, "LND712") !== false) !== false) {
		$usvh = number_format(($cpm / 120.5), 3);
	}elseif (strpos($sensorType, "LND78017") !== false || strpos($sensorType, "LND 78017") !== false) {
		$usvh = number_format(($cpm / 960), 3);
	} else {
		$usvh = number_format(($cpm / 334), 3);
	}

	update_post_meta($postId, 'sensor_measurement_last_usvh', $usvh);
	update_post_meta($postId, 'sensor_measurement_last_cpm', $cpm);
	update_post_meta($postId, 'sensor_measurement_last_gmt', $measurement->captured_at);
	update_post_meta($postId, 'sensor_measurement_last_latitude', $measurement->latitude);
	update_post_meta($postId, 'sensor_measurement_last_longitude', $measurement->longitude);
	update_post_meta($postId, 'sensor_measurement_last_id', $measurement->id);
	update_post_meta($postId, 'sensor_measurement_last_user_id', $measurement->user_id);
	
	if ($cpm >= $maxCpm) {
		update_post_meta($postId, 'sensor_measurement_max_usvh', $usvh);
		update_post_meta($postId, 'sensor_measurement_max_cpm', $cpm);
		update_post_meta($postId, 'sensor_measurement_max_gmt', $measurement->captured_at);
		update_post_meta($postId, 'sensor_measurement_max_latitude', $measurement->latitude);
		update_post_meta($postId, 'sensor_measurement_max_longitude', $measurement->longitude);
		update_post_meta($postId, 'sensor_measurement_max_id', $measurement->id);
		update_post_meta($postId, 'sensor_measurement_max_user_id', $measurement->user_id);
	}
}

function getSensorType($postId, $sensorId, $reset) {
	$type = get_post_meta($postId, 'sensor_type', TRUE);
	
	if (!$type || $reset) {
		if (VERBOSE) {
			printf("Retrieving information for device %s\n", $sensorId);
		}
		$uri	= sprintf(API_URI_INFO_FORMAT, $sensorId);
		
		/* Querying the API */
		$response    = \Httpful\Request::get($uri)->send();
		$information = $response->body;
		
		updateSensorInformation($postId, $information);
		$type = get_post_meta($postId, 'sensor_type', TRUE);
	}
	
	return $type;
}

function logMeasurement($filehandle, $postId) {
	$sensorId             = get_post_meta(get_the_ID(), 'sensor_id', TRUE);
	$sensorType           = get_post_meta(get_the_ID(), 'sensor_type', TRUE);
	$sensorManufacturer   = get_post_meta(get_the_ID(), 'sensor_manufacturer', TRUE);
	$sensorModel          = get_post_meta(get_the_ID(), 'sensor_model', TRUE);
	$measurementId        = get_post_meta(get_the_ID(), 'sensor_measurement_last_id', TRUE);
	$measurementUserId    = get_post_meta(get_the_ID(), 'sensor_measurement_last_user_id', TRUE);
	$measurementMsv       = get_post_meta(get_the_ID(), 'sensor_measurement_last_usvh', TRUE);
	$measurementCpm       = get_post_meta(get_the_ID(), 'sensor_measurement_last_cpm', TRUE);
	$measurementGmt       = get_post_meta(get_the_ID(), 'sensor_measurement_last_gmt', TRUE);
	$measurementLatitude  = get_post_meta(get_the_ID(), 'sensor_m<?php
/**
 * Safecast update sensors measurements functions
 *
 * PHP version 5.X
 *
 * @package    Safecast
 * @author     Marc Rollin <rollin.marc@gmail.com>
 * @copyright  2014 Safecast
 */

/* Safecast API URL format */
define('API_URI_INFO_FORMAT', 'https://api.safecast.org/devices/%s.json');
define('API_URI_CREATE_FORMAT', 'https://api.safecast.org/en-US/measurements.json?device_id=%s&per_page=1000&order=captured_at+asc');
define('API_URI_UPDATE_FORMAT', 'https://api.safecast.org/en-US/measurements.json?device_id=%s&per_page=1000&captured_after="%s"&order=captured_at+asc');


function updateSensorInformation($postId, $information) {
	update_post_meta($postId, 'sensor_type', $information->sensor);
	update_post_meta($postId, 'sensor_manufacturer', $information->manufacturer);
	update_post_meta($postId, 'sensor_model', $information->model);
}

function updateSensorMeasurement($postId, $measurement) {
	$cpm            = (float)$measurement->value;
	$maxCpm         = (float)get_post_meta($postId, 'sensor_measurement_max_cpm', TRUE);
	$sensorType     = get_post_meta(get_the_ID(), 'sensor_type', TRUE);
	
	/* Based on tube type the conversion from cpm differs */
	if (strpos($sensorType, "LND712") !== false || strpos($sensorType, "LND 712"|| strpos($sensorType, "LND712") !== false) !== false) {
		$usvh = number_format(($cpm / 120.5), 3);
	}elseif (strpos($sensorType, "LND78017") !== false || strpos($sensorType, "LND 78017") !== false) {
		$usvh = number_format(($cpm / 960), 3);
	} else {
		$usvh = number_format(($cpm / 334), 3);
	}

	update_post_meta($postId, 'sensor_measurement_last_usvh', $usvh);
	update_post_meta($postId, 'sensor_measurement_last_cpm', $cpm);
	update_post_meta($postId, 'sensor_measurement_last_gmt', $measurement->captured_at);
	update_post_meta($postId, 'sensor_measurement_last_latitude', $measurement->latitude);
	update_post_meta($postId, 'sensor_measurement_last_longitude', $measurement->longitude);
	update_post_meta($postId, 'sensor_measurement_last_id', $measurement->id);
	update_post_meta($postId, 'sensor_measurement_last_user_id', $measurement->user_id);
	
	if ($cpm >= $maxCpm) {
		update_post_meta($postId, 'sensor_measurement_max_usvh', $usvh);
		update_post_meta($postId, 'sensor_measurement_max_cpm', $cpm);
		update_post_meta($postId, 'sensor_measurement_max_gmt', $measurement->captured_at);
		update_post_meta($postId, 'sensor_measurement_max_latitude', $measurement->latitude);
		update_post_meta($postId, 'sensor_measurement_max_longitude', $measurement->longitude);
		update_post_meta($postId, 'sensor_measurement_max_id', $measurement->id);
		update_post_meta($postId, 'sensor_measurement_max_user_id', $measurement->user_id);
	}
}

function getSensorType($postId, $sensorId, $reset) {
	$type = get_post_meta($postId, 'sensor_type', TRUE);
	
	if (!$type || $reset) {
		if (VERBOSE) {
			printf("Retrieving information for device %s\n", $sensorId);
		}
		$uri	= sprintf(API_URI_INFO_FORMAT, $sensorId);
		
		/* Querying the API */
		$response    = \Httpful\Request::get($uri)->send();
		$information = $response->body;
		
		updateSensorInformation($postId, $information);
		$type = get_post_meta($postId, 'sensor_type', TRUE);
	}
	
	return $type;
}

function logMeasurement($filehandle, $postId) {
	$sensorId             = get_post_meta(get_the_ID(), 'sensor_id', TRUE);
	$sensorType           = get_post_meta(get_the_ID(), 'sensor_type', TRUE);
	$sensorManufacturer   = get_post_meta(get_the_ID(), 'sensor_manufacturer', TRUE);
	$sensorModel          = get_post_meta(get_the_ID(), 'sensor_model', TRUE);
	$measurementId        = get_post_meta(get_the_ID(), 'sensor_measurement_last_id', TRUE);
	$measurementUserId    = get_post_meta(get_the_ID(), 'sensor_measurement_last_user_id', TRUE);
	$measurementMsv       = get_post_meta(get_the_ID(), 'sensor_measurement_last_usvh', TRUE);
	$measurementCpm       = get_post_meta(get_the_ID(), 'sensor_measurement_last_cpm', TRUE);
	$measurementGmt       = get_post_meta(get_the_ID(), 'sensor_measurement_last_gmt', TRUE);
	$measurementLatitude  = get_post_meta(get_the_ID(), 'sensor_m